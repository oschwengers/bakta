import pytest

from bakta.features import cds as feat_cds
from bakta.io import fasta as fasta
import bakta.utils as bu
import bakta.config as cfg

cfg.min_contig_length = 1
genome, unused = bu.qc_contigs(fasta.import_contigs('data/GCF_000008865.2.fna.gz'), cfg.replicons)
# Todo test for sORF
# TODO CDS execute prodigal output fnn, read fnn to dict {start_stop: sequence}


@pytest.mark.parametrize(
    "feature, contigs, expected",
    [
        # tRNA with sequence
        ({'type': 'tRNA',
          'contig': 'contig_1',
          'start': 776592,
          'stop': 776666,
          'strand': '-',
          'sequence': 'TGGGGTATCGCCAAGCGGTAAGGCACCGGATTCTGATTCCGGCATTCCGAGGTTCGAATCCTCGTACCCCAGCCA',
          }, genome, 'TGGGGTATCGCCAAGCGGTAAGGCACCGGATTCTGATTCCGGCATTCCGAGGTTCGAATCCTCGTACCCCAGCCA'),
        # tRNA without sequence
        ({'type': 'tRNA',
          'contig': 'contig_1',
          'start': 776592,
          'stop': 776666,
          'strand': '-',
          }, genome, 'TGGGGTATCGCCAAGCGGTAAGGCACCGGATTCTGATTCCGGCATTCCGAGGTTCGAATCCTCGTACCCCAGCCA'),
        # cds, - strand
        ({
             "type": "cds",
             "contig": "contig_1",
             "start": 9945,
             "stop": 10511,
             "strand": "-",
         }, genome, 'ATGGGCAACACTAAGTTGGCTAATCCGGCACCGCTGGGCCTGATGGGCTTCGGCATGACCACCATTCTGCTTAACCTGCACAACGTAGGTTATTTCG'
                    'CTCTGGACGGTATTATTCTTGCCATGGGCATTTTCTACGGCGGCATCGCGCAAATTTTTGCTGGTCTGCTGGAGTACAAAAAAGGCAACACTTTCGG'
                    'TTTAACCGCATTCACCTCTTACGGTTCTTTCTGGCTGACGCTGGTTGCGATTCTGCTGATGCCGAAACTGGGTCTGACCGATGCGCCAAATGCACAG'
                    'TTCCTTGGTGTCTACCTGGGTCTGTGGGGCGTATTTACGCTGTTTATGTTCTTCGGCACGCTGAAAGGCGCACGCGTTCTGCAATTCGTTTTCTTTA'
                    'GCCTGACCGTGCTGTTTGCCCTGCTGGCGATCGGTAACATTGCCGGTAACGCCGCAATCATCCACTTTGCCGGCTGGATTGGTCTGATCTGCGGTGC'
                    'CAGCGCAATCTATCTGGCGATGGGTGAAGTACTGAACGAGCAGTTTGGTCGCACCGTTCTGCCGATTGGTGAATCCCACTAA'),
        # cds on 5’ & 3’ contig edge, + strand
        ({'type': 'cds',
          'contig': 'contig_2',
          'start': 92563,
          'stop': 2502,
          'edge': True,
          'strand': '+'}, genome, 'ATGAAATTAAAGTATCTGTCATGTACGATCCTTGCCCCTCTGGCGATTGGGGTATTTTCTGCAACAGCTGCTGATAATAATTCA'
                                  'GCCATTTATTTCAATACCTCCCAGCCTATAAATGATCTGCAGGGTTCGTTGGCCGCAGAGGTGAAATTTGCACAAAGCCAGATT'
                                  'TTACCCGCCCATCCTAAAGAAGGGGATAGTCAACCACATCTGACCAGCCTGCGGAAAAGTCTGCTGCTTGTCCGTCCGGTGAAA'
                                  'GCTGATGATAAAACACCTGTTCAGGTGGAAGCCCGCGATGATAATAATAAAATTCTCGGTACGTTAACCCTTTATCCTCCTTCA'
                                  'TCACTACCGGATACAATCTACCATCTGGATGGTGTTCCGGAAGGTGGTATCGATTTCACACCTCATAATGGAACGAAAAAGATC'
                                  'ATTAATACGGTGGCTGAAGTAAACAAACTCAGTGATGCCAGCGGGAGTTCTATTCATAGCCATCTAACAAATAATGCACTGGTG'
                                  'GAGATCCATACTGCAAATGGTCGTTGGGTAAGAGACATTTATCTGCCGCAGGGACCCGACCTTGAAGGTAAGATGGTTCGCTTT'
                                  'GTTTCGTCTGCAGGCTATAGTTCAACGGTTTTTTATGGTGATCGAAAAGTCACACTCTCGGTGGGTAACACTCTTCTGTTCAAA'
                                  'TATGTAAATGGTCAGTGGTTCCGCTCCGGTGAACTGGAGAATAATCGAATCACTTATGCTCAGCATATTTGGAGTGCTGAACTG'
                                  'CCTGCGCACTGGATCGTGCCTGGTTTAAACTTGGTGATTAAACAGGGCAATCTGAGCGGTCGCCTAAATGATATCAAGATTGGA'
                                  'GCACCGGGTGAGCTGTTGTTGCATACAATTGATATCGGGATGTTGACCACTCCCCGGGATCGCTTTGATTTTGCCAAAGACAAA'
                                  'GAAGCACATAGGGAATATTTCCAGACCATTCCTGTAAGTCGTATGATTGTTAATAATTATGCGCCTCTACACCTAAAGGAAGTT'
                                  'ATGTTACCAACCGGAGAGTTATTGACAGATATGGATCCAGGAAATGGTGGGTGGCATAGTGGTACAATGCGTCAAAGAATAGGT'
                                  'AAAGAATTGGTTTCGCATGGCATTGATAATGCTAACTATGGTTTAAATAGTACCGCAGGCTTAGGGGAGAATAGTCATCCATAT'
                                  'GTAGTTGCGCAATTAGCGGCACATAATAGCCGCGGTAATTATGCTAATGGCATCCAGGTTCATGGTGGCTCCGGAGGTGGGGGA'
                                  'ATTGTTACTTTAGATTCCACATTGGGGAATGAGTTCAGTCATGAAGTTGGTCATAATTATGGTCTTGGTCATTATGTAGATGGT'
                                  'TTCAAGGGTTCTGTACATCGTAGTGCAGAAAATAACAACTCAACTTGGGGATGGGATGGTGATAAAAAACGGTTTATTCCTAAC'
                                  'TTTTATCCGTCTCAAACAAATGAAAAGAGTTGTCTGAATAATCAGTGTCAAGAACCGTTTGATGGACACAAATTTGGTTTTGAC'
                                  'GCCATGGCGGGAGGCAGCCCTTTCTCTGCTGCAAACCGTTTCACAATGTATACTCCGAATTCATCGGCTATCATCCAGCGTTTT'
                                  'TTTGAAAATAAAGCTGTGTTCGATAGCCGTTCCTCCACCGGCTTCAGCAAGTGGAATGCAGATACGCAGGAAATGGAACCGTAT'
                                  'GAACACACCATTGACCGTGCGGAGCAGATTACGGCTTCAGTCAATGAGCTAAGTGAAAGCAAAATGGCTGAGCTGATGGCAGAG'
                                  'TACGCTGTCGTCAAAGTGCATATGTGGAACGGTAACTGGACAAGAAACATCTATATCCCTACAGCCTCCGCAGATAATAGAGGC'
                                  'AGTATCCTGACCATCAACCATGAGGCCGGTTATAATAGTTATCTGTTTATAAATGGTGACGAAAAGGTCGTTTCCCAGGGGTAT'
                                  'AAAAAGAGCTTTGTTTCCGATGGTCAGTTCTGGAAAGAACGTGATGTGGTTGATACTCGTGAAGCGCGTAAGCCAGAGCAGTTT'
                                  'GGTGTTCCTGTGACGACTCTGGTGGGGTATTACGATCCGGAAGGCACGCTGTCAAGCTACATCTATCCTGCGATGTATGGTGCC'
                                  'TATGGCTTCACTTATTCCGATGATAGTCAGAATCTATCCGATAACGACTGCCAGCTGCAGGTGGATACGAAAGAAGGGCAGTTG'
                                  'CGATTCAGACTGGCTAATCACCGGGCTAACAACACTGTAATGAATAAGTTCCATATTAACGTGCCAACAGAAAGTCAGCCCACA'
                                  'CAGGCCACATTGGTTTGCAATAACAAGATACTGGATACCAAATCGCTCACACCTGCGCCAGAAGGACTTACCTATACTGTAAAT'
                                  'GGGCAGGCACTTCCAGCAAAAGAAAACGAGGGATGCATCGTGTCCGTGAATTCAGGTAAACGTTACTGTTTGCCGGTTGGTCAA'
                                  'CGGTCAGGATATAGCCTTCCTGACTGGATTGTTGGGCAGGAAGTCTATGTCGACAGCGGGGCTAAAGCGAAAGTGCTGCTTTCT'
                                  'GACTGGGATAACCTGTCCTATAACAGGATTGGTGAGTTTGTAGGTAATGTGAACCCAGCTGATATGAAAAAAGTTAAAGCCTGG'
                                  'AACGGACAGTATTTGGACTTCAGTAAACCTAGGTCAATGAGGGTTGTATATAAATAA')
    ]
)
def test_get_nucleotide_seqeunce(feature, contigs, expected):
    assert feat_cds.get_nucleotide_seqeunce(feature, contigs) == expected
